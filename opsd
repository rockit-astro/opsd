#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Operations daemon"""

# pylint: disable=invalid-name
# pylint: disable=broad-except
# pylint: disable=too-many-instance-attributes

import argparse
import sys
import threading
import numpy as np
import Pyro4
from astropy.time import Time
import astropy.units as u
from rockit.common import log, TryLock
from rockit.common.helpers import pyro_client_matches
from rockit.operations import (
    Config,
    DomeController,
    TelescopeController,
    EnvironmentWatcher,
    CommandStatus,
    OperationsMode,
    parse_dome_window,
    parse_schedule_actions,
    validate_schedule,
    night_start_end
)

# Include more detailed exceptions
sys.excepthook = Pyro4.util.excepthook

# Delay between ops and dome loop ticks (seconds)
LOOP_DELAY = 10

class OperationsDaemon:
    """Daemon class that controls the overall observatory operations"""
    def __init__(self, config):
        self._command_lock = threading.Lock()
        self._wait_condition = threading.Condition()
        self._config = config

        self._environment = EnvironmentWatcher(self._config)
        self._dome = DomeController(self._config)
        self._telescope = TelescopeController(self._config, self._dome)

        runloop = threading.Thread(target=self.__ops_loop)
        runloop.daemon = True
        runloop.start()

    def __ops_loop(self):
        """Main operations run loop.
           Polls the environment and closes the dome if necessary
           Individual telescope actions are expected to check the
           status of the dome and abort if necessary
        """
        while True:
            self._environment.update()
            self._dome.notify_environment_status(self._environment.safe)

            # Wait for the next loop period, unless woken up early by __shortcut_loop_wait
            with self._wait_condition:
                self._wait_condition.wait(self._config.loop_delay)

    def __shortcut_loop_wait(self):
        """Makes the run loop continue immediately if it is currently sleeping"""
        with self._wait_condition:
            self._wait_condition.notify_all()

    @Pyro4.expose
    def dome_control(self, automatic):
        """Switch the dome between manual (observer) and automatic (opsd) control"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            return self._dome.set_mode(OperationsMode.Automatic if automatic else OperationsMode.Manual)

    @Pyro4.expose
    def tel_control(self, automatic):
        """Switch the telescope between manual (observer) and automatic (opsd) control"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            # Require error states to be cleared manually before allowing return to automatic mode
            tel_status = self._telescope.status()
            if automatic and tel_status['mode'] == OperationsMode.Error:
                return CommandStatus.InErrorState

            mode = OperationsMode.Automatic if automatic else OperationsMode.Manual
            self._telescope.request_mode(mode)

            label = 'automatic' if automatic else 'manual'
            log.info(self._config.log_name, 'Telescope control changed to ' + label)

            return CommandStatus.Succeeded

    @Pyro4.expose
    def status(self):
        """Query the latest status."""
        return {
            'dome': self._dome.status(),
            'telescope': self._telescope.status(),
            'environment': self._environment.status(),
        }

    @Pyro4.expose
    def current_night(self):
        """Returns the current 'night' value expected for the scheduler"""
        current_night = (Time.now() - 1 * u.day).strftime('%Y-%m-%d')
        start, end = night_start_end(current_night, self._config)
        if Time.now() > end:
            current_night = Time.now().strftime('%Y-%m-%d')

        return current_night

    @Pyro4.expose
    def notify_processed_frame(self, headers):
        """Called by the pipeline daemon to notify that a new frame has completed processing
           headers is a dictionary holding the key-value pairs from the fits header"""
        if not pyro_client_matches(self._config.pipeline_ips):
            return

        self._telescope.notify_processed_frame(headers)

    @Pyro4.expose
    def notify_guide_profiles(self, headers, profile_x, profile_y):
        """Called by the pipeline daemon to notify that a new guide profile has been calculated
           headers is a dictionary holding the key-value pairs from the fits header
           profile_x and profile_y are python (not numpy) arrays holding the collapsed profiles"""
        if not pyro_client_matches(self._config.pipeline_ips):
            return

        # Pyro doesn't support numpy arrays, so convert from the built-in array type
        self._telescope.notify_guide_profile(headers, np.array(profile_x), np.array(profile_y))

    @Pyro4.expose
    def stop_telescope(self):
        """Cancels an active telescope task"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        self._telescope.abort()
        return CommandStatus.Succeeded

    @Pyro4.expose
    def clear_dome_window(self):
        """Cancels the dome open window"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        return self._dome.clear_schedule()

    @Pyro4.expose
    def schedule_observations(self, schedule):
        """Schedules actions to the telescope and dome"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        dome_status = self._dome.status()
        if dome_status['mode'] == OperationsMode.Error:
            return CommandStatus.InErrorState

        valid, _ = validate_schedule(schedule, self._config, True)
        if not valid:
            return CommandStatus.InvalidSchedule

        dome_window = parse_dome_window(schedule, self._config)
        if dome_window:
            dome_status = self._dome.set_schedule(*dome_window)
            if dome_status != CommandStatus.Succeeded:
                return dome_status

        actions = parse_schedule_actions(self._config, schedule)
        if not self._telescope.queue_actions(actions):
            return CommandStatus.TelescopeNotAutomatic

        self.__shortcut_loop_wait()
        return CommandStatus.Succeeded


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Operations Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(OperationsDaemon(c))
