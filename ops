#!/usr/bin/env python3
#
# This file is part of opsd.
#
# opsd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# opsd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with opsd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for communicating with the operations daemon"""

import datetime
import json
import os
import sys
import Pyro4

PYRO_HOST = '192.168.0.102'
PYRO_PORT = 9015
PYRO_NAME = 'operations_daemon'
PYRO_COMM_TIMEOUT = 5

PYRO_URI = 'PYRO:' + PYRO_NAME + '@' + PYRO_HOST + ':' + str(PYRO_PORT)
SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_CYAN = u'\033[96m'
FMT_YELLOW = u'\033[93m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

# This should be kept in sync with the class in domed
STATUS_CODES = {
    # General error codes
    1: 'error: command failed',
    2: 'error: another command is already running',
    3: 'error: error state must first be cleared by switching to manual mode',

    # ops specific codes
    -100: 'error: terminated by user',
    -101: 'error: unable to communicate with operations daemon'
}

OPS_MODES = {
    0: FMT_RED + 'ERROR',
    1: FMT_GREEN + 'AUTOMATIC',
    2: FMT_YELLOW + 'MANUAL'
}

DOME_STATUS_CODES = {
    0: FMT_RED + 'CLOSED',
    1: FMT_GREEN + 'OPEN',
    2: FMT_YELLOW + 'MOVING'
}

def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
#        ret = stop()
        ret = 0

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret in STATUS_CODES:
        print(STATUS_CODES[ret])
    elif ret != -1 and ret != 0:
        print('Returned unknown status code: {0}'.format(ret))
    sys.exit(ret)

def dome_control(args):
    """Changes the dome between automatic and manual control"""
    if len(args) > 0:
        if args[0] == 'auto' or args[0] == 'manual':
            with Pyro4.Proxy(PYRO_URI) as ops:
                return ops.dome_control(args[0] == 'auto')

    print('usage: {} dome (auto|manual)'.format(SCRIPT_NAME))
    return -1

def set_observing(args):
    """Enable or disable the global observing mode (opens the dome)"""
    if len(args) > 0:
        if args[0] == 'enabled' or args[0] == 'disabled':
            with Pyro4.Proxy(PYRO_URI) as ops:
                return ops.set_observing(args[0] == 'enabled')

    print('usage: {} observing (enabled|disabled)'.format(SCRIPT_NAME))
    return -1

def print_status():
    """Prints the latest ops data in machine-readable form"""
    status = None
    try:
        with Pyro4.Proxy(PYRO_URI) as ops:
            status = ops.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the operations daemon')
        return 1

    env_date = datetime.datetime.strptime(status['environment_updated'], '%Y-%m-%dT%H:%M:%SZ')
    print('Environment status at ' + FMT_BOLD + env_date.strftime('%H:%M:%S') + FMT_CLEAR + ':')
    print('    Conditions: ' + FMT_BOLD + (FMT_GREEN + 'SAFE' if status['environment_safe'] else \
        FMT_RED + 'NOT SAFE') + FMT_CLEAR)

    print()

    dome_date = datetime.datetime.strptime(status['dome_updated'], '%Y-%m-%dT%H:%M:%SZ')
    print('Dome status at ' + FMT_BOLD + dome_date.strftime('%H:%M:%S') + FMT_CLEAR + ':')

    dome_mode = '    Control: ' + FMT_BOLD + OPS_MODES[status['dome_mode']] + FMT_CLEAR
    if status['dome_mode'] != status['dome_requested_mode']:
        dome_mode += ' (' + FMT_BOLD + OPS_MODES[status['dome_requested_mode']] + FMT_CLEAR + \
            ' queued)'
    print(dome_mode)

    if status['dome_mode'] == 1:
        observing = FMT_GREEN + 'ENABLED' if status['observing'] else FMT_RED + 'DISABLED'
        observing_status = '    Observing: ' + FMT_BOLD + observing + FMT_CLEAR
        print(observing_status)
        dome_status = '    Shutters: ' + FMT_BOLD + DOME_STATUS_CODES[status['dome_status']] + \
            FMT_CLEAR
        if status['dome_status'] != status['dome_requested_status']:
            dome_status += ' (' + FMT_BOLD + DOME_STATUS_CODES[status['dome_requested_status']] + \
                FMT_CLEAR + ' queued)'
        print(dome_status)

    return 0

def print_json():
    """Prints the latest ops data in machine-readable form"""
    status = None
    try:
        with Pyro4.Proxy(PYRO_URI) as ops:
            status = ops.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the operations daemon')
        return 1

    print(json.dumps(status))

    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   json        print a machine-readable summary of the operations status')
    print('   status      print a human-readable summary of the operations status')
    print('   dome        toggle dome between manual and automatic control')
    print('   observing   toggle observing mode on or off')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    Pyro4.config.COMMTIMEOUT = PYRO_COMM_TIMEOUT
    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())
    elif sys.argv[1] == 'dome':
        run_command(lambda: dome_control(sys.argv[2:]))
    elif sys.argv[1] == 'observing':
        run_command(lambda: set_observing(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

