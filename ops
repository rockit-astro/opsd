#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for communicating with the operations daemon"""

import glob
import json
import os
import sys
import Pyro4
from astropy.time import Time
import astropy.units as u
from rockit.common import print
from rockit.operations import (
    Config,
    CommandStatus,
    ConditionStatus,
    DomeStatus,
    OperationsMode,
    validate_schedule
)
from rockit.operations.schedule import night_start_end

SCRIPT_NAME = os.path.basename(sys.argv[0])

sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'OPSD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['OPSD_CONFIG_PATH'])
    else:
        # Load the config file defined in the OPSD_CONFIG_PATH environment variable or from the
        # default system location (/etc/teld/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/opsd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as OPSD_CONFIG_PATH=/path/to/config.json ops <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in (0, -1):
        print(CommandStatus.message(ret))
    return ret


def dome_control(config, args):
    """Changes the dome between automatic and manual control and cancels automated observing"""
    if config.dome_json is None:
        print(f'error: dome not supported for this telescope')
        return -1

    if args and args[0] in ['open', 'close', 'auto', 'manual']:
        with config.daemon.connect() as ops:
            if args[0] == 'close':
                return ops.clear_dome_window()

            if args[0] == 'open':
                current_night = Time.now()
                if current_night.to_datetime().hour < 12:
                    current_night -= 1 * u.day
                current_night = current_night.strftime('%Y-%m-%d')

                open_start, open_end = night_start_end(current_night, config.site_location, config.sun_altitude_limit)
                if open_start < Time.now() < open_end:
                    return ops.schedule_observations({
                        'night': current_night,
                        'dome': {
                            'open': open_start.strftime('%Y-%m-%dT%H:%M:%SZ'),
                            'close': open_end.strftime('%Y-%m-%dT%H:%M:%SZ'),
                        }
                    })
                return CommandStatus.EnvironmentNotSafe
            return ops.dome_control(args[0] == 'auto')

    print(f'usage: {SCRIPT_NAME} dome (open|close|auto|manual)')
    return -1


def tel_control(config, args):
    """Changes the telescope between automatic and manual control and cancels automated observing"""
    if args:
        if args[0] == 'stop':
            with config.daemon.connect() as ops:
                return ops.stop_telescope()

        if args[0] in ['auto', 'manual']:
            with config.daemon.connect() as ops:
                return ops.tel_control(args[0] == 'auto')

    print(f'usage: {SCRIPT_NAME} tel (auto|manual|stop)')
    return -1


def validate_schedule_json(config, args):
    """checks a schedule file for errors"""
    if len(args) != 1:
        print(f'usage: {SCRIPT_NAME} validate <observation json>')
        return -1

    try:
        with open(args[0], 'r') as infile:
            schedule_json = json.load(infile)
    except FileNotFoundError:
        print(f'error: file {args[0]} not found')
        return -1
    except Exception as e:
        print('error: invalid json file')
        print('error was: ' + str(e))
        return -1

    valid, errors = validate_schedule(schedule_json, config, False)
    status = '[green]PASSED[/green]' if valid else '[red]FAILED[/red]'
    print(f'Validation [b]{status}[/b]')
    for e in errors:
        print('   ' + e)

    return -1


def schedule(config, args):
    """Schedule observations for a nights observing"""
    dome_arg = '--dome' in args
    if dome_arg:
        args.remove('--dome')

    tel_arg = '--tel' in args
    if tel_arg:
        args.remove('--tel')

    if len(args) != 1:
        print(f'usage: {SCRIPT_NAME} schedule [--dome] [--tel] <observation json>')
        return -1

    try:
        with open(args[0], 'r') as infile:
            schedule_json = json.load(infile)

            # Skip tel actions
            if dome_arg and not tel_arg and 'actions' in schedule_json:
                schedule_json.pop('actions')

            # Skip dome times
            if tel_arg and not dome_arg and 'dome' in schedule_json:
                schedule_json.pop('dome')

    except FileNotFoundError:
        print(f'error: file {args[0]} not found')
        return -1
    except Exception as e:
        print('error: invalid json file')
        print('error was: ' + str(e))
        return -1

    # Make sure the schedule is valid first!
    valid, errors = validate_schedule(schedule_json, config, True)
    if not valid:
        print('error: invalid json file:')
        for e in errors:
            print('   ' + e)
        return -1

    with config.daemon.connect() as ops:
        return ops.schedule_observations(schedule_json)


def print_status(config, _):
    """Prints the latest ops data in machine-readable form"""
    try:
        with config.daemon.connect() as ops:
            status = ops.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the operations daemon')
        return 1

    env_date = Time.strptime(status['environment']['updated'], '%Y-%m-%dT%H:%M:%SZ')
    env_status = 'Environment status at [b]' + env_date.strftime('%H:%M:%S') + '[/b]: '
    if status['environment']['safe']:
        env_status += '[b][green]SAFE[/green][/b]'
    else:
        env_status += '[b][red]UNSAFE[/red][/b]'
    print(env_status)

    for label, sensors in status['environment']['conditions'].items():
        line = f'{label:>17}: '
        line += ', '.join([ConditionStatus.format_label(s, label) for label, s in sensors.items()])
        print(line)
    print()

    if 'dome' in status:
        dome = status['dome']
        dome_date = Time.strptime(dome['status_updated'], '%Y-%m-%dT%H:%M:%SZ')
        print('Dome status at [b]' + dome_date.strftime('%H:%M:%S') + '[/b]:')

        dome_mode = '    Control: ' + OperationsMode.label(dome['mode'], True)
        if dome['mode'] != dome['requested_mode']:
            dome_mode += ' (' + OperationsMode.label(dome['requested_mode'], True) + ' queued)'
        print(dome_mode)

        if dome['mode'] == OperationsMode.Automatic:
            open_str = close_str = '[yellow]Not Scheduled[/yellow]'
            if dome['requested_open_date']:
                open_str = dome['requested_open_date']
            print(f'     Opening: [b]{open_str}[/b]')

            if dome['requested_close_date']:
                close_str = dome['requested_close_date']
            print(f'     Closing: [b]{close_str}[/b]')

            dome_status = '    Shutters: ' + DomeStatus.label(dome['status'], True)
            print(dome_status)

    tel = status['telescope']
    tel_date = Time.strptime(tel['status_updated'], '%Y-%m-%dT%H:%M:%SZ')
    print(f'Telescope status at [b]' + tel_date.strftime('%H:%M:%S') + '[/b]:')

    tel_mode = '    Control: ' + OperationsMode.label(tel['mode'], True)
    if tel['mode'] != tel['requested_mode']:
        tel_mode += ' (' + OperationsMode.label(tel['requested_mode'], True) + ' queued)'

    print(tel_mode)

    if tel['mode'] == OperationsMode.Automatic:
        if 'schedule' in tel and tel['schedule']:
            print('   Schedule:')
            for action in tel['schedule']:
                label = f'      [b]{action["name"]}[/b]'
                if action['tasks']:
                    label += ':'
                print(label)
                for task in action['tasks']:
                    if isinstance(task, list):
                        for subtask in task:
                            print(f'          - {subtask}')
                    else:
                        print(f'       - {task}')
        else:
            print(f'   Schedule: [b][yellow]EMPTY[/yellow][/b]')

    return 0


def print_json(config, _):
    """Prints the latest ops data in machine-readable form"""
    try:
        with config.daemon.connect() as ops:
            status = ops.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the operations daemon')
        return 1

    print(json.dumps(status))

    return 0


def script(config, args):
    if len(args) > 0 and args[0] in config.scripts:
        config.scripts[args[0]](f'{SCRIPT_NAME} script {args[0]}', args[1:])
        return 0

    print(f'usage: {SCRIPT_NAME} script <script name> \\[script arguments]')
    print()

    max_name_length = max(len(name) for name in config.scripts)
    for script_name, script_func in config.scripts.items():
        padding = ' ' * (3 + max_name_length - len(script_name))
        print('   ' + script_name + padding + script_func.description)
    print()

    return -1


def script_completion(config, _):
    print(' '.join(config.scripts))
    return 0


def print_usage():
    """Prints the utility help"""
    print(f'usage: {SCRIPT_NAME} <command>')
    print()
    print('   json         print a machine-readable summary of the operations status')
    print('   status       print a human-readable summary of the operations status')
    print('   dome         toggle dome between manual and automatic control and request open or closed')
    print('   tel          toggle telescope between manual and automatic control or cancel actions')
    print('   validate     checks a schedule file for errors')
    print('   schedule     schedule observations for the night')
    print('   script       execute an operations script')
    print()

    return 1


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'json': print_json,
        'dome': dome_control,
        'tel': tel_control,
        'validate': validate_schedule_json,
        'schedule': schedule,
        'script': script,
        'script-completion': script_completion
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
